import React, { useState, useEffect } from 'react';
import { Card, Typography, Button, Checkbox, Space, Divider, message } from 'antd';
import { BarChartOutlined, DisconnectOutlined, CalendarOutlined, ClockCircleOutlined } from '@ant-design/icons';
import ChatInterface from './ChatInterface';
import axios from 'axios';
import dayjs from 'dayjs';

const { Title, Text } = Typography;

const CalendarAnalysis = ({ isConnected, events, accessToken }) => {
  // State to track all stretch suggestions across chat sessions
  const [allStretchSuggestions, setAllStretchSuggestions] = useState([]);
  const [selectedSuggestions, setSelectedSuggestions] = useState([]);
  const [isAddingToCalendar, setIsAddingToCalendar] = useState(false);
  const [addedSuggestions, setAddedSuggestions] = useState(new Set()); // Track added suggestions

  // Function to handle new stretch suggestions from ChatInterface
  const handleStretchSuggestionsUpdate = (suggestions) => {
    // Merge new suggestions with existing ones, avoiding duplicates
    setAllStretchSuggestions(prevSuggestions => {
      const existingTimes = new Set(prevSuggestions.map(s => s.time));
      const newSuggestions = suggestions.filter(s => !existingTimes.has(s.time));
      return [...prevSuggestions, ...newSuggestions];
    });
  };

  // Function to clear all suggestions (useful when disconnecting or starting fresh)
  const handleClearSuggestions = () => {
    setAllStretchSuggestions([]);
    setSelectedSuggestions([]);
    setAddedSuggestions(new Set());
  };

  // Parse time string to dayjs object
  const parseTimeString = (timeStr) => {
    try {
      const now = new Date();
      const today = now.toDateString();
      return dayjs(`${today} ${timeStr}`);
    } catch (error) {
      console.error("Error parsing time:", timeStr, error);
      return dayjs();
    }
  };

  // Create calendar event
  const createCalendarEvent = async (suggestion) => {
    try {
      const eventTime = parseTimeString(suggestion.time);
      const startTime = eventTime.toISOString();
      const endTime = eventTime.add(2, 'minute').toISOString();

      const baseUrl = window.location.origin;
      
      const eventData = {
        summary: `Desk Stretch: ${suggestion.description}`,
        description: `Quick desk stretch break - ${suggestion.description}\n\nGenerated by Calendar Assistant\n\nNeed stretch guidance? Visit: ${baseUrl}/stretches`,
        start: {
          dateTime: startTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
        end: {
          dateTime: endTime,
          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        },
        colorId: '11', // Purple color ID for Google Calendar
        reminders: {
          useDefault: false,
          overrides: [
            { method: 'popup', minutes: 0 },
          ],
        },
      };

      const response = await axios.post(
        'https://www.googleapis.com/calendar/v3/calendars/primary/events',
        eventData,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        }
      );

      return response.data;
    } catch (error) {
      console.error('Error creating calendar event:', error);
      throw error;
    }
  };

  // Handle adding selected suggestions to calendar
  const handleAddSelectedToCalendar = async () => {
    if (selectedSuggestions.length === 0) {
      message.warning('Please select at least one stretch suggestion to add to your calendar.');
      return;
    }

    setIsAddingToCalendar(true);
    let successCount = 0;
    let errorCount = 0;

    try {
      for (const suggestionId of selectedSuggestions) {
        const suggestion = allStretchSuggestions.find(s => s.id === suggestionId);
        if (suggestion) {
          try {
            await createCalendarEvent(suggestion);
            successCount++;
            // Mark as added
            setAddedSuggestions(prev => new Set([...prev, suggestion.id]));
          } catch (error) {
            errorCount++;
            console.error(`Failed to create event for ${suggestion.time}:`, error);
          }
        }
      }

      if (successCount > 0) {
        message.success(`Successfully added ${successCount} stretch break${successCount > 1 ? 's' : ''} to your calendar!`);
        // Clear selection after successful addition
        setSelectedSuggestions([]);
      }
      
      if (errorCount > 0) {
        message.error(`Failed to add ${errorCount} stretch break${errorCount > 1 ? 's' : ''} to your calendar.`);
      }
    } catch (error) {
      message.error('An error occurred while adding events to your calendar.');
    } finally {
      setIsAddingToCalendar(false);
    }
  };

  // Handle individual checkbox changes
  const handleSuggestionToggle = (suggestionId) => {
    // Don't allow toggling if already added
    if (addedSuggestions.has(suggestionId)) return;
    
    setSelectedSuggestions(prev => 
      prev.includes(suggestionId)
        ? prev.filter(id => id !== suggestionId)
        : [...prev, suggestionId]
    );
  };

  // Handle select all/none (only for non-added suggestions)
  const handleSelectAll = () => {
    const nonAddedSuggestions = allStretchSuggestions
      .filter(s => !addedSuggestions.has(s.id))
      .map(s => s.id);
    setSelectedSuggestions(nonAddedSuggestions);
  };

  const handleSelectNone = () => {
    setSelectedSuggestions([]);
  };

  // Clear suggestions when disconnected
  useEffect(() => {
    if (!isConnected) {
      handleClearSuggestions();
    }
  }, [isConnected]);

  // Sort suggestions by time for display
  const sortedSuggestions = [...allStretchSuggestions].sort((a, b) => {
    const timeA = parseTimeString(a.time);
    const timeB = parseTimeString(b.time);
    return timeA.isBefore(timeB) ? -1 : 1;
  });

  return (
    <Card
      style={{
        borderRadius: 12,
        boxShadow: "0 2px 8px rgba(0, 0, 0, 0.1)",
        height: "calc(100vh - 128px)",
        display: "flex",
        flexDirection: "column"
      }}
      bodyStyle={{ 
        padding: 24,
        display: "flex",
        flexDirection: "column",
        flex: 1,
        height: "100%"
      }}
    >
      {isConnected ? (
        <div style={{ 
          height: '100%', 
          display: 'flex', 
          flexDirection: 'row',
          gap: '16px',
          minHeight: 0
        }}>
          {/* Chat Interface - Left Side */}
          <div style={{ 
            flex: 1, 
            minHeight: 0,
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column'
          }}>
            <ChatInterface 
              events={events} 
              accessToken={accessToken} 
              onStretchSuggestionsUpdate={handleStretchSuggestionsUpdate}
            />
          </div>

          {/* Stretch Suggestions Summary - Right Side */}
          <div style={{ 
            width: '300px',
            flexShrink: 0,
            display: 'flex',
            flexDirection: 'column'
          }}>
          

            {/* Stretch Suggestions Summary */}
            {sortedSuggestions.length > 0 ? (
              <div style={{ 
                flex: 1,
                display: 'flex',
                flexDirection: 'column',
                minHeight: 0
              }}>
                <div style={{ 
                  flexShrink: 0,
                  marginBottom: 12,
                  padding: 12,
                  background: "#f9f9f9",
                  borderRadius: 8,
                  border: "1px solid #f0f0f0"
                }}>
                  <div style={{ display: "flex", alignItems: "center", marginBottom: 8 }}>
                    <ClockCircleOutlined style={{ fontSize: 16, color: "#52c41a", marginRight: 8 }} />
                    <Text strong style={{ fontSize: 14 }}>Stretch Times ({sortedSuggestions.length})</Text>
                  </div>
                  
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                    <Button 
                      size="small" 
                      onClick={handleSelectAll}
                      disabled={selectedSuggestions.length === allStretchSuggestions.filter(s => !addedSuggestions.has(s.id)).length}
                      style={{ width: '100%' }}
                    >
                      Select All
                    </Button>
                    <Button 
                      size="small" 
                      onClick={handleSelectNone}
                      disabled={selectedSuggestions.length === 0}
                      style={{ width: '100%' }}
                    >
                      Clear All
                    </Button>
                    <Button
                      type="primary"
                      size="small"
                      icon={<CalendarOutlined />}
                      onClick={handleAddSelectedToCalendar}
                      disabled={selectedSuggestions.length === 0 || !accessToken}
                      loading={isAddingToCalendar}
                      style={{
                        width: '100%',
                        background: "#52c41a",
                        borderColor: "#52c41a",
                      }}
                    >
                      Add Selected ({selectedSuggestions.length})
                    </Button>
                  </div>
                </div>

                <div style={{ 
                  flex: 1,
                  overflowY: "auto",
                  paddingRight: "4px"
                }}>
                  {sortedSuggestions.map((suggestion) => {
                    const isAdded = addedSuggestions.has(suggestion.id);
                    const isSelected = selectedSuggestions.includes(suggestion.id);
                    
                    return (
                      <div
                        key={suggestion.id}
                        style={{
                          padding: 8,
                          marginBottom: 6,
                          background: isAdded ? '#f5f5f5' : (isSelected ? '#f6ffed' : '#fff'),
                          border: '1px solid #e8e8e8',
                          borderRadius: 6,
                          cursor: isAdded ? 'default' : 'pointer',
                          transition: 'all 0.2s ease',
                          opacity: isAdded ? 0.6 : 1
                        }}
                        onClick={() => !isAdded && handleSuggestionToggle(suggestion.id)}
                      >
                        <div style={{ display: 'flex', alignItems: 'flex-start' }}>
                          <Checkbox
                            checked={isSelected}
                            onChange={() => !isAdded && handleSuggestionToggle(suggestion.id)}
                            disabled={isAdded}
                            style={{ marginRight: 8, marginTop: 2 }}
                          />
                          <div style={{ flex: 1, minWidth: 0 }}>
                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                              <Text 
                                strong 
                                style={{ 
                                  fontSize: 13, 
                                  color: isAdded ? "#8c8c8c" : "#1890ff" 
                                }}
                              >
                                {suggestion.time}
                              </Text>
                              {isAdded && (
                                <Text 
                                  type="secondary" 
                                  style={{ 
                                    fontSize: 11, 
                                    color: "#52c41a",
                                    fontStyle: 'italic'
                                  }}
                                >
                                  Added
                                </Text>
                              )}
                            </div>
                            <div style={{ marginTop: 2 }}>
                              <Text 
                                type="secondary" 
                                style={{ 
                                  fontSize: 12, 
                                  lineHeight: 1.3,
                                  wordBreak: 'break-word',
                                  color: isAdded ? "#8c8c8c" : undefined
                                }}
                              >
                                {suggestion.description}
                              </Text>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            ) : (
              <div style={{ 
                flex: 1,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
                alignItems: 'center',
                textAlign: 'center',
                color: '#8c8c8c'
              }}>
                <ClockCircleOutlined style={{ fontSize: 32, marginBottom: 12 }} />
                <Text type="secondary">No stretch suggestions yet</Text>
                <Text type="secondary" style={{ fontSize: 12, marginTop: 4 }}>
                  Ask the assistant for desk stretch recommendations
                </Text>
              </div>
            )}
          </div>
        </div>
      ) : (
        /* Empty state when not connected */
        <div style={{ 
          display: "flex", 
          flexDirection: "column", 
          alignItems: "center", 
          justifyContent: "center",
          flex: 1,
          textAlign: "center"
        }}>
          <DisconnectOutlined style={{ fontSize: 48, color: "#d9d9d9", marginBottom: 16 }} />
          <Title level={4} style={{ margin: 0, marginBottom: 8, color: "#8c8c8c" }}>
            No Calendar Data
          </Title>
          <Text type="secondary" style={{ fontSize: 16 }}>
            Connect your Google account to view calendar analysis and insights
          </Text>
        </div>
      )}
    </Card>
  );
};

export default CalendarAnalysis;